
#include "ProcessQueue.h"

#include <sys/mman.h>
#include <unistd.h>
#include <iostream>
#include <thread>

#define ProcessQueue InterprocessQueues<1024, uint32_t, uint64_t>

int main() {
    auto addr = mmap(0, sizeof(ProcessQueue), PROT_READ|PROT_WRITE, MAP_SHARED|MAP_ANONYMOUS, -1, 0);
    auto &queue = *(new(addr) ProcessQueue);

    bool good = true;
    std::vector<std::thread> threads{};
    if(fork()) {
        threads.push_back(std::thread{[&queue, &good] {
            for(size_t i = 0; i < 1024; i++) {
                uint64_t data;
                queue.receive(data);
                if(data != i) {
                    good = false;
                    return;
                }
            }
        }});
        threads.push_back(std::thread{[&queue] {
            for(size_t i = 0; i < 1024; i++) {
                const uint32_t tmp = i;
                queue.send(tmp);
            }
        }});
    }else {
        threads.push_back(std::thread{[&queue] {
            for(size_t i = 0; i < 1024; i++) {
                uint32_t data;
                queue.receive(data);
                size_t tmp = i | data;
                queue.send(tmp);
            }
        }});
    }

    for(auto & thread : threads) thread.join();
    
    return good ? 0 : -1;
}
