
#define TEST(func) if(func()) return -1

#include <unistd.h>
#include <thread>
#include <vector>
#include "ProcessQueue.h"

MessageQueue<1024> queue;

int test_write_multiple() {
    size_t bytes_to_write = MessageQueue<1024>::size;
    uint8_t type = 0;
    while(bytes_to_write) {
        #define typewriter(T) if(sizeof(T) <= bytes_to_write) { T val = (T) bytes_to_write; queue.send(val); bytes_to_write -= sizeof(T); }
        switch(type) {
        case 0:
            typewriter(uint8_t);
            type++;
            continue;
        case 1:
            typewriter(uint16_t);
            type++;
            continue;
        case 2:
            typewriter(uint32_t);
            type++;
            continue;
        case 3:
            typewriter(uint64_t);
            type = 0;
            continue;
        default:
            break;
        }
        #undef typewriter
    }
    return bytes_to_write;
}

int test_read_multiple() {
    size_t bytes_to_read = MessageQueue<1024>::size;
    uint8_t type = 0;
    while(bytes_to_read) {
        #define typewriter(T) if(sizeof(T) <= bytes_to_read) { T val; queue.receive(val); bytes_to_read -= sizeof(T); }
        switch(type) {
        case 0:
            typewriter(uint8_t);
            type++;
            continue;
        case 1:
            typewriter(uint16_t);
            type++;
            continue;
        case 2:
            typewriter(uint32_t);
            type++;
            continue;
        case 3:
            typewriter(uint64_t);
            type = 0;
            continue;
        default:
            break;
        }
        #undef typewriter
    }
    return bytes_to_read;
}

int test_write_multiple_2() {
    size_t bytes_to_write = MessageQueue<1024>::size;
    uint8_t type = 0;
    while(bytes_to_write) {
        #define typewriter(T) if(sizeof(T) <= bytes_to_write) { T val = (T) bytes_to_write; queue.respond(val); bytes_to_write -= sizeof(T); }
        switch(type) {
        case 0:
            typewriter(uint8_t);
            type++;
            continue;
        case 1:
            typewriter(uint16_t);
            type++;
            continue;
        case 2:
            typewriter(uint32_t);
            type++;
            continue;
        case 3:
            typewriter(uint64_t);
            type = 0;
            continue;
        default:
            break;
        }
        #undef typewriter
    }
    return bytes_to_write;
}

int test_read_multiple_2() {
    size_t bytes_to_read = MessageQueue<1024>::size;
    uint8_t type = 0;
    while(bytes_to_read) {
        #define typewriter(T) if(sizeof(T) <= bytes_to_read) { T val; queue.response(val); bytes_to_read -= sizeof(T); }
        switch(type) {
        case 0:
            typewriter(uint8_t);
            type++;
            continue;
        case 1:
            typewriter(uint16_t);
            type++;
            continue;
        case 2:
            typewriter(uint32_t);
            type++;
            continue;
        case 3:
            typewriter(uint64_t);
            type = 0;
            continue;
        default:
            break;
        }
        #undef typewriter
    }
    return bytes_to_read;
}

int test_all() {
    std::vector<std::thread> threads;

    constexpr size_t mod8 = decltype(queue)::size % 8;
    constexpr size_t div8 = decltype(queue)::size / 8;
    static_assert(mod8 == 0);

    int status = -1;
    threads.push_back(std::thread([&status] {
        bool good = true;
        for(size_t i = 0; i < div8; i++) {
            uint8_t arr[8];
            for(size_t j = 0; j < 8; j++) {
                queue.response(arr[j]);
            }
            size_t val = *((uint64_t *) arr);
            size_t expected = i;
            expected = (expected << 16) | expected;
            expected = (expected << 32) | expected;
            good = good && (val == expected);
        }
        if(good) status = 0;
    }));
    threads.push_back(std::thread([] {
        for(size_t i = 0; i < div8; i++) {
            uint32_t arr[2];
            for(int j = 0; j < 2; j++) {
                queue.receive(arr[j]);
            }
            uint16_t val = (uint16_t) *((uint64_t *) arr);
            for(int j = 0; j < 4; j++) {
                queue.respond(val);
            }
        }
    }));
    threads.push_back(std::thread([] {
        for(size_t i = 0; i < div8; i++) {
            queue.send(i);
        }
    }));

    for(auto i = 0; i < threads.size(); i++) threads[i].join();
    return status;
}

int main() {
    TEST(test_write_multiple);
    TEST(test_read_multiple);
    TEST(test_write_multiple_2);
    TEST(test_read_multiple_2);

    TEST(test_all);

    return 0;
}
